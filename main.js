/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var m=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var S=(d,l)=>{for(var e in l)m(d,e,{get:l[e],enumerable:!0})},$=(d,l,e,n)=>{if(l&&typeof l=="object"||typeof l=="function")for(let t of T(l))!x.call(d,t)&&t!==e&&m(d,t,{get:()=>l[t],enumerable:!(n=y(l,t))||n.enumerable});return d};var C=d=>$(m({},"__esModule",{value:!0}),d);var k={};S(k,{default:()=>f});module.exports=C(k);var r=require("obsidian"),L={defaultSort:"name",headingTitle:"Note Tree",headingLevel:4},f=class extends r.Plugin{async onload(){await this.loadSettings(),this.addCommand({id:"open-note-tree-generator",name:"Open Note Tree Generator",callback:()=>{new w(this.app,this).open()}}),this.addCommand({id:"generate-tree-from-current-note",name:"Generate tree from current note",editorCallback:(e,n)=>{let t=n.file;t?this.generateNoteTree(t.basename).then(i=>{let o=`${"#".repeat(this.settings.headingLevel)} ${this.settings.headingTitle}

${i}`;e.replaceSelection(o),new r.Notice("Note tree generated")}).catch(i=>{new r.Notice("Error generating tree: "+i)}):new r.Notice("No open file")}}),this.addSettingTab(new v(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},L,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async getMarkdownLinks(e){let n=[],i=this.app.vault.getMarkdownFiles().find(c=>c.basename===e);if(!i)return n;let s=await this.app.vault.read(i),o=/\[\[(.*?)\]\]/g,a;for(;(a=o.exec(s))!==null;){let c=a[1].split("|")[0];n.includes(c)||n.push(c)}return n}async buildNoteGraph(){let e={},n=this.app.vault.getMarkdownFiles();for(let t of n){let i=await this.getMarkdownLinks(t.basename);i.length>0?e[t.basename]=i:e[t.basename]=[]}return e}async generateNoteTree(e){let n=await this.buildNoteGraph(),t=new Set,i={};return this.writeNoteTree(n,e,0,t,i)}writeNoteTree(e,n,t=0,i=new Set,s={}){if(i.has(n))return"";i.add(n);let o="	".repeat(t);t in s||(s[t]=0),s[t]++;let a=`${o}${s[t]}. [[${n}]]
`,c=e[n]||[];Object.keys(s).forEach(h=>{parseInt(h)>t&&delete s[parseInt(h)]});for(let h of c)a+=this.writeNoteTree(e,h,t+1,i,{...s});return a}searchFiles(e=""){let n=this.app.vault.getMarkdownFiles();if(!e)return n;let t=e.toLowerCase();return n.filter(i=>i.basename.toLowerCase().includes(t))}},w=class extends r.Modal{constructor(e,n){super(e);this.selectedNote=null;this.plugin=n}onOpen(){this.containerEl.addClass("note-tree-modal"),this.modalEl.style.width="80%",this.modalEl.style.height="80vh",this.modalEl.style.maxWidth="1000px",this.containerEl.style.overflow="hidden",this.modalEl.style.overflow="hidden";let{contentEl:e}=this;e.empty(),e.style.overflow="hidden";let n=e.createEl("div",{cls:"modal-header"});n.createEl("h2",{text:"Note Tree Generator"});let t=n.createEl("div",{cls:"search-container"});t.createEl("span",{text:"\u{1F50D}"}),this.searchInput=t.createEl("input",{type:"text",placeholder:"Search notes..."}),this.searchInput.addEventListener("input",()=>this.updateFileList());let i=e.createEl("div",{cls:"note-tree-container"});i.style.display="flex",i.style.height="calc(100% - 130px)",i.style.overflow="hidden";let s=i.createEl("div",{cls:"file-list-container"});s.createEl("h3",{text:"Available Files"}),this.fileListEl=s.createEl("div",{cls:"file-list"}),this.fileListEl.style.height="calc(100% - 40px)",this.fileListEl.style.overflowY="auto";let o=i.createEl("div",{cls:"preview-container"});o.createEl("h3",{text:"Preview"}),this.previewEl=o.createEl("div",{cls:"preview"}),this.previewEl.style.height="calc(100% - 40px)",this.previewEl.style.overflowY="auto";let a=e.createEl("div",{cls:"button-container"});a.style.position="absolute",a.style.bottom="10px",a.style.left="0",a.style.right="0",a.createEl("button",{text:"Copy to Clipboard"}).addEventListener("click",()=>this.copyToClipboard()),a.createEl("button",{text:"Insert into Editor"}).addEventListener("click",()=>this.insertIntoEditor()),a.createEl("button",{text:"Share Notes"}).addEventListener("click",()=>this.shareSelectedNote()),this.updateFileList()}updateFileList(){this.fileListEl.empty();let e=this.searchInput.value,n=this.plugin.searchFiles(e);if(n.length===0){this.fileListEl.createEl("div",{text:"No files found",cls:"no-results"});return}n.forEach(t=>{let i=this.fileListEl.createEl("div",{text:t.basename,cls:"file-item"});i.addEventListener("click",()=>{this.fileListEl.querySelectorAll(".file-item.selected").forEach(s=>s.removeClass("selected")),i.addClass("selected"),this.selectedNote=t.basename,this.updatePreview()})})}async updatePreview(){if(this.previewEl.empty(),!this.selectedNote){this.previewEl.createEl("p",{text:"Select a note to see its tree"});return}try{let e=await this.plugin.generateNoteTree(this.selectedNote),n="#".repeat(this.plugin.settings.headingLevel),t=`${n} ${this.plugin.settings.headingTitle}

${e}`,i=this.previewEl.createDiv({cls:"debug-info"});i.style.display="none";let s=this.previewEl.createDiv({cls:"markdown-preview"}),o=this.parseTreeContent(e);s.innerHTML=this.renderHeading(n,this.plugin.settings.headingTitle)+o}catch(e){this.previewEl.createEl("p",{text:`Error generating tree: ${e}`,cls:"error-message"})}}renderHeading(e,n){let t=e.length;return`<h${t} class="tree-heading">${n}</h${t}>`}parseTreeContent(e){let n=e.split(`
`),t="",i={};for(let s of n){if(!s.trim()){t+="<br>";continue}let o=s.match(/^(\t*)(\d+)\.\s+(.*)$/);if(o){let[a,c,h,p]=o,g=c.length;i[g]===void 0?i[g]=1:i[g]++;for(let u=g+1;u<10;u++)i[u]!==void 0&&delete i[u];let b=i[g],N=p.replace(/\[\[(.*?)\]\]/g,'<span class="internal-link">$1</span>');t+=`<div class="tree-item" style="padding-left: ${g*20}px"><span class="tree-number">${b}.</span> <span class="tree-content">${N}</span></div>`}else t+=`<div>${s.replace(/\[\[(.*?)\]\]/g,'<span class="internal-link">$1</span>')}</div>`}return t}markdownToHTML(e){return e.replace(/\n/g,"<br>").replace(/\t/g,"&nbsp;&nbsp;&nbsp;&nbsp;").replace(/\[\[(.*?)\]\]/g,'<span class="internal-link">$1</span>').replace(/^(#+)\s+(.*?)$/gm,(n,t,i)=>{let s=t.length;return`<h${s}>${i}</h${s}>`})}copyToClipboard(){if(!this.selectedNote){new r.Notice("Please select a note first");return}this.plugin.generateNoteTree(this.selectedNote).then(e=>{let t=`${"#".repeat(this.plugin.settings.headingLevel)} ${this.plugin.settings.headingTitle}

${e}`;navigator.clipboard.writeText(t),new r.Notice("Content copied to clipboard")}).catch(e=>{new r.Notice("Error copying: "+e)})}insertIntoEditor(){if(!this.selectedNote){new r.Notice("Please select a note first");return}let e=this.app.workspace.getActiveViewOfType(r.MarkdownView);if(!e){new r.Notice("No active editor");return}this.plugin.generateNoteTree(this.selectedNote).then(n=>{let i=`${"#".repeat(this.plugin.settings.headingLevel)} ${this.plugin.settings.headingTitle}

${n}`;e.editor.replaceSelection(i),new r.Notice("Note tree inserted"),this.close()}).catch(n=>{new r.Notice("Error inserting: "+n)})}shareSelectedNote(){if(!this.selectedNote){new r.Notice("Please select a note first");return}new E(this.app,this.plugin,this.selectedNote,n=>{this.selectedNote&&this.exportNotesToFolder(this.selectedNote,n)}).open()}async exportNotesToFolder(e,n){try{let t=`/${n}`;await this.app.vault.adapter.exists(t)||await this.app.vault.createFolder(t);let i=await this.plugin.buildNoteGraph(),s=new Set;this.collectConnectedNotes(i,e,s);let o=0,a=this.app.vault.getMarkdownFiles();for(let c of s){let h=a.find(p=>p.basename===c);if(h){let p=await this.app.vault.read(h),g=`${t}/${h.basename}.md`;await this.app.vault.adapter.exists(g)||(await this.app.vault.create(g,p),o++)}}new r.Notice(`Exported ${o} notes to ${n}`)}catch(t){new r.Notice(`Error exporting notes: ${t}`),console.error("Error exporting notes:",t)}}collectConnectedNotes(e,n,t){if(!n||t.has(n))return;t.add(n);let i=e[n]||[];for(let s of i)this.collectConnectedNotes(e,s,t)}onClose(){let{contentEl:e}=this;e.empty()}},E=class extends r.Modal{constructor(e,n,t,i){super(e);this.plugin=n,this.rootNote=t,this.onSubmit=i}onOpen(){let{contentEl:e}=this;e.empty(),e.addClass("share-notes-modal"),e.createEl("h3",{text:"Share Notes"});let n=e.createEl("p",{text:`This will export "${this.rootNote}" and all connected notes to a new folder in your vault.`}),t=e.createEl("div",{cls:"form-container"});t.createEl("label",{text:"Folder name:"}).setAttribute("for","folder-name-input"),this.folderNameInput=t.createEl("input",{type:"text",placeholder:"shared_notes",cls:"folder-name-input"}),this.folderNameInput.id="folder-name-input";let s=new Date,o=`${s.getFullYear()}-${(s.getMonth()+1).toString().padStart(2,"0")}-${s.getDate().toString().padStart(2,"0")}`;this.folderNameInput.value=`shared_notes_${o}`;let a=e.createEl("div",{cls:"button-container"});a.createEl("button",{text:"Cancel"}).addEventListener("click",()=>this.close()),a.createEl("button",{text:"Share",cls:"mod-cta"}).addEventListener("click",()=>{let p=this.folderNameInput.value.trim();if(!p){new r.Notice("Please enter a folder name");return}this.onSubmit(p),this.close()}),this.folderNameInput.focus()}onClose(){let{contentEl:e}=this;e.empty()}},v=class extends r.PluginSettingTab{constructor(e,n){super(e,n);this.plugin=n}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Note Tree Generator Settings"}),new r.Setting(e).setName("Default sort").setDesc("Method to sort notes in the list").addDropdown(n=>n.addOption("name","By name").setValue(this.plugin.settings.defaultSort).onChange(async t=>{this.plugin.settings.defaultSort=t,await this.plugin.saveSettings()})),new r.Setting(e).setName("Heading title").setDesc("Title for the note tree heading").addText(n=>n.setPlaceholder("Enter heading title").setValue(this.plugin.settings.headingTitle).onChange(async t=>{this.plugin.settings.headingTitle=t,await this.plugin.saveSettings()})),new r.Setting(e).setName("Heading level").setDesc("Markdown heading level (1-6)").addDropdown(n=>n.addOption("1","H1").addOption("2","H2").addOption("3","H3").addOption("4","H4").addOption("5","H5").addOption("6","H6").setValue(this.plugin.settings.headingLevel.toString()).onChange(async t=>{this.plugin.settings.headingLevel=parseInt(t),await this.plugin.saveSettings()}))}};
